@attribute [Route(Paths.Backlash + Paths.MyAccount)]

@using BoardGamesEShop.Client.DbContexts
@using BoardGamesEShop.Client.DbContexts.Abstractions
@using BoardGamesEShop.Client.Models.Accounts
@using BoardGamesEShop.Client.Navigations
@using BoardGamesEShop.Client.Pages.Layout
@using BoardGamesEShop.Client.Services
@using Microsoft.EntityFrameworkCore

@inject Singleton<Account> Account
@inject NavigationManager NavManager
@inject DbContextManager<IProductContext> ProductContextManager

@if (closed)
{
    <p>This account has been closed.</p>
}
else
if (UserAccount is not null)
{
    <h3>Account</h3>
    <h5>Name: @UserAccount.Name</h5>
    <h5>Phone Number: @UserAccount.PhoneNumber</h5>

    <h3>Addresses</h3>
    @foreach (var address in UserAccount.Addresses)
    {
        <p>@address
        </p>
    }

    <h3>Purchase History</h3>
        <div style="th, td { padding: 15px }">
            <table>
                <tr>
                    <th>Time</th>
                    <th>Price</th>
                    <th>Address</th>
                </tr>


            @foreach (var bill in ProductContextManager.Select(db => db.Bills.Include(b => b.Buyer)
                                                                             .Include(b => b.TotalProductsPrice
                                                                             .Currency))
           .Where(b => b.Buyer.Equals(Account.Value))
           .OrderBy(b => b.Time)
           .Reverse())
            {
                string link = Paths.Bill + Paths.Backlash + bill.Id;
                <tr>
                    <td><a href="@link">@bill.Time</a></td>
                    <td>@bill.TotalPrice</td>
                    <td>@bill.Destination</td>
                </tr>
            }    
            </table>
        </div>

    <h3>Review History</h3>
    <ul>
        @foreach (var review in ProductContextManager.Select(db => db.Reviews.Include(r => r.Reviewer)
                                                                              .Include(r => r.Product)
                                                                              .Where(r => r.Reviewer.Equals(Account.Value))
                                                                              .OrderBy(r => r.Time)
                                                                              .Reverse()))
        {
            <li>
                <a href=@(Paths.Product + Paths.Backlash + review.Product.Id)>@review.Product.Name</a>
                <label>@(" ")</label>
                <label>@review.Time</label>
                <label>@(" ")</label>
                <label>@review.Stars ⭐</label><br/>
            </li>
            <p>@review.Comment</p>
        }
    </ul>

    <button @onclick=LogOut>Log Out</button>
}

@code {
    private bool closed = false;

    [Parameter]
    public required User UserAccount { get; set; }

    [CascadingParameter]
    public required ILayoutHandle Layout { get; set; }

    private void LogOut(MouseEventArgs e)
    {
        Layout.Account = null;

        NavManager.NavigateTo(Paths.Home);
    }

    protected override void OnInitialized()
    {
        if (Account.Value is not User user)
        {
            NavManager.NavigateTo(Paths.Login);
            return;
        }

        if (Account.Value.IsClosed)
        {
            closed = true;
            Layout.Account = null;
            return;
        }

        UserAccount = user;
    }

}
