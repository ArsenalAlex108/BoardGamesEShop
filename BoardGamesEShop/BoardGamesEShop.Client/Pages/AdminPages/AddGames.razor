@using BoardGamesEShop.Client.DbContexts
@using BoardGamesEShop.Client.DbContexts.Abstractions
@using BoardGamesEShop.Client.Dtos
@using BoardGamesEShop.Client.Navigations
@using BoardGamesEShop.Client.Pages.Layout
@using BoardGamesEShop.Client.Templates

@attribute [Route(Paths.AddGames)]

@inherits AdminPage

@inject DbContextManager<IProductContext> ProductContextManager
@inject NavigationManager NavManager

<h3>AddGames</h3>
@if (!String.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
<EditForm Model="model" FormName="AddGameForm" OnValidSubmit="Validate">
     <DataAnnotationsValidator />
     <ValidationSummary />
     <InputText @bind-Value=model.Name></InputText>
     <InputTextArea @bind-Value=model.Description></InputTextArea>
     <ListStringForm StringList="model.ImagePaths" ItemName="Image Link" />
     <button type="submit">Add Game</button>
</EditForm>


@code {


    private GameDto model = new();

    private string error = "";

    private async Task Validate(EditContext editContext)
    {
        if (ProductContextManager.Select(db => db.Games).Any(g => g.Name == model.Name))
        {
            error = "A game with that name already exists.";
            return;
        }

        await ProductContextManager.Transaction(async db =>
        {
            await db.Games.AddAsync(model.ToGame());
        });

        NavManager.NavigateTo(Paths.ManageGames);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
