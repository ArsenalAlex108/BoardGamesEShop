@using BoardGamesEShop.Client.Models.Accounts
@using BoardGamesEShop.Client.Navigations
@using BoardGamesEShop.Client.Pages.Layout
@using BoardGamesEShop.Client.Services
@using BoardGamesEShop.Client.Templates
@using BoardGamesEShop.Client.Dtos
@using BoardGamesEShop.Client.DbContexts
@using BoardGamesEShop.Client.DbContexts.Abstractions

@inject DbContextManager<IAccountContext> AccountContextManager
@inject NavigationManager NavManager
@inject Singleton<Account> Account

@rendermode InteractiveServer

@page "/signup"

<h3>Sign Up</h3>
<LoginInfo OnSubmitCallback="@OnSubmit" ValidationErrors="@validationErrors" ButtonText="Sign Up"/>

@code {
    private string validationErrors = "";

    [CascadingParameter]
    public required PublicLayout Layout { get; set; }

    private async Task OnSubmit(AccountLogin signup)
    {
        if (AccountContextManager.Select(db => db.Accounts)
                                 .Any(acc => acc.Name == signup.Name))
        {
            validationErrors = $"User \"{signup.Name}\" already exists.";
            return;
        }

        var account = signup.ToAccount();

        await AccountContextManager.Transaction(async db =>
        {
            await db.Users.AddAsync(account);
        });

        Account.Value = account;

        NavManager.NavigateLogin(account);

        Layout.LoadAccount(account);
    }

}

@code {

}
